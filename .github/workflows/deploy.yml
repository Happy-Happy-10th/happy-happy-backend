name: Prd Deploy (Self-hosted)

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: [self-hosted, ncp-prd]
    env:
      REGISTRY: yottaeyo-registry.kr.ncr.ntruss.com
      IMAGE_NAME: yottaeyo-app

    steps:
      # 1) 현재 main 브랜치의 소스를 배포 서버(self-hosted runner)에 다운
      - uses: actions/checkout@v4

      # 2) JDK 17 준비
      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) GitHub Secrets(APPLICATION_YML, base64 인코딩된 설정) → 디코딩하여 application.yml 생성
      - name: Set YML
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml

      # 4) Gradle 캐시 설정
      - uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.5

      # 5) 프로젝트 빌드
      - name: Build Project
        run: ./gradlew bootJar

      # 6) 이미지 태그용 날짜 세팅
      - name: Set Date
        run: echo "DATE_TAG=$(TZ=Asia/Seoul date +'%y%m%d')" >> $GITHUB_ENV

      # 7) 커밋 해시 세팅
      - id: commit-hash
        uses: prompt/actions-commit-hash@v3

      # 8) NCP 레지스트리 로그인
      - name: Login to NCP Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      # 9) Docker 이미지 생성 → 레지스트리에 업로드
      - name: Build & Push Docker Image
        env:
          IMAGE_TAG: ${{ format('{0}-{1}', env.DATE_TAG, steps.commit-hash.outputs.short) }}
        run: |
          docker build -f ./Dockerfile -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG $GITHUB_WORKSPACE
          docker tag $REGISTRY/$IMAGE_NAME:$IMAGE_TAG $REGISTRY/$IMAGE_NAME:latest
          docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          docker push $REGISTRY/$IMAGE_NAME:latest

      # 10) 앱 컨테이너만 최신 이미지로 교체
      - name: Deploy app
        working-directory: /home/deploy
        run: |
          docker compose up -d --pull always yottaeyo-app
          docker image prune -f
